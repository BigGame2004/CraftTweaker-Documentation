---
import EventPage from "@components/page/EventPage.astro";
import TypePage from "@components/page/TypePage.astro";
import type {
    GetStaticPaths,
    InferGetStaticParamsType,
    InferGetStaticPropsType,
} from "astro";
import {
    PageModel,
    type Types,
    type Versions,
    getAllVersions,
    getDocsJson,
    getFlatVersions,
    getPageMeta,
    getPagesFor,
    getTypesJson,
    PageKindModel,
    PageVersionModel,
    MarkdownPageModel, type PageVisitor, type EnumPageModel, type EventPageModel, type ExpansionPageModel, type RenderedPageModel, type TypePageModel, type BuildContext,
} from "docs-model";
import PageNav from "../../../components/nav/PageNav.astro";
import SideNav from "../../../components/nav/side/SideNav.astro";
import SideNavController from "../../../components/nav/side/SideNavController.astro";
import EnumPage from "../../../components/page/EnumPage.astro";
import Layout from "../../../layouts/Layout.astro";
import fs from "fs-extra";
import MarkdownPage from "../../../components/page/MarkdownPage.astro";
import ExpansionPage from "../../../components/page/ExpansionPage.astro";
import type {AstroComponentFactory} from "astro/runtime/server/index.d.ts";

export const getStaticPaths = (async () => {
    const promises: {
        params: { version: string; slug: string };
        props: { path: string; name: string; versions: Versions; types: Types };
    }[] = [];
    const versions = getAllVersions();

    for (const version of getFlatVersions(versions)) {
        const docsJson = getDocsJson(version);
        const types = getTypesJson(version);
        if (!docsJson || !types) {
            continue;
        }

        // Inject the index.md page on /
        promises.push({
            params: {
                version,
                slug: "/",
            },
            props: {
                path: `./src/docs/${version}/content/index.md`,
                name: "Home",
                versions,
                types,
            },
        });

        for (const page of getPagesFor(version)) {
            const {name, path} = page;
            const slug = path.replace(/\.(md|json)/, "");
            const pagePath = `./src/docs/${version}/content/${path}`;
            if (!fs.existsSync(pagePath)) {
                throw new Error(
                    `Unlinked page in '${version}': '${name}': '${pagePath}'`,
                );
            }

            promises.push({
                params: {
                    version,
                    slug,
                },
                props: {
                    path: pagePath,
                    name,
                    versions,
                    types,
                },
            });
        }
    }
    return promises;
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const {version, slug} = Astro.params;
const {name, path, types, versions} = Astro.props;

const pageContent = fs.readFileSync(path, "utf-8");

const createPage = (): PageModel => {
    if (path.endsWith(".md")) {
        const isHome = slug === undefined;
        const pageSlug = isHome ? "index" : slug;
        const meta = getPageMeta(version, pageSlug);
        return MarkdownPageModel.parse({
            display_name: name,
            key: pageSlug,
            content: pageContent,
            meta,
            kind: PageKindModel.MARKDOWN,
            version: PageVersionModel.ONE,
        });
    }
    if (path.endsWith(".json")) {
        return PageModel.parsePage(JSON.parse(pageContent));
    }
    throw new Error(`Unknown page type: ${path}`);
};
const page = createPage();
const meta = page.meta;

let PageComponent = undefined;
if(page.isEnumPage()) {
    PageComponent = EnumPage;
} else if(page.isEventPage()) {
    PageComponent = EventPage;
} else if (page.isExpansionPage()) {
    PageComponent = ExpansionPage;
}else if (page.isMarkdownPage()) {
    PageComponent = MarkdownPage;
} else if (page.isRenderedPage()) {
    throw new Error("Unable to render Rendered pages yet.")
} else if(page.isTypePage()) {
    PageComponent = TypePage;
}
if(!PageComponent) {
    throw new Error("Unknown Page Component");
}
---
<Layout versions = {versions} version = {version} slug = {slug} meta = {meta}>
    <div class = "flex">
        <SideNav meta = {meta} version = {version} versions = {versions}/>
        <div class = "w-full lg:w-content">
            <div class = "container mx-auto my-4 mb-64 w-11/12 xl:w-4/6">
                <PageNav meta = {meta} version = {version}/>
                <div id = "content" class = "markdown">
                    <PageComponent context = {{version, slug, types, page, type: page.isBaseTypePage() ? page.type : page.isExpansionPage() ? page.getType(types, version) : undefined}}/>
                </div>
                <PageNav meta = {meta} version = {version}/>
            </div>
        </div>
        <SideNavController/>
    </div>
</Layout>

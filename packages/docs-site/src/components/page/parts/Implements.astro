---
import type { BaseTypePage, BuildContext, TypeModel } from "docs-model";
import InlineCode from "../../markdown/InlineCode.astro";
import Heading from "../Heading.astro";
import Type from "../components/types/Type.astro";
interface Props {
    slug: string;
    type: TypeModel;
    context: BuildContext<BaseTypePage>;
}
const { slug, type, context } = Astro.props;
const documentedInterfaces: TypeModel[] = [];
const undocumentedInterfaces: TypeModel[] = [];

if (type.isJava()) {
    for (const value of type.interfaces) {
        if (context.types[value.key]) {
            documentedInterfaces.push(value);
        } else {
            undocumentedInterfaces.push(value);
        }
    }
}
---

{
    (documentedInterfaces.length > 0 || undocumentedInterfaces.length > 0) && (
        <>
            <Heading depth={3} slug={slug}>
                Implements
            </Heading>
            {documentedInterfaces.length > 0 && (
                <>
                    <InlineCode><Type type={type} context={context} location="implements"  allow_overrides={false}/></InlineCode>
                    implements the following interfaces:
                    <p class="flex flex-wrap gap-x-1">
                        {documentedInterfaces.map((value, index) => (
                            <span>
                                <InlineCode><Type type={value} context={{ ...context, typeLinks: true }} location="implements" allow_overrides={false}/></InlineCode>
                                {index !== documentedInterfaces.length - 1 && <>,</>}
                            </span>
                        ))}
                    </p>
                </>
            )}

            {undocumentedInterfaces.length > 0 && (
                <details>
                    <summary>Undocumented Interfaces</summary>
                    <p class="flex flex-wrap gap-x-1">
                        {undocumentedInterfaces.map((value, index) => (
                            <span>
                                <InlineCode><Type type={value} context={{ ...context, typeLinks: true }} location="implements" allow_overrides={false}/></InlineCode>
                                {index !== undocumentedInterfaces.length - 1 && <span>,</span>}
                            </span>
                        ))}
                    </p>
                </details>
            )}
        </>
    )
}

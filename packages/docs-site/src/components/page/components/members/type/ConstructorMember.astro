---
import { Code } from "astro-expressive-code/components";
import {
    type BaseTypePage,
    type BuildContext,
    type ConstructorMemberModel,
    capitalizeFirst,
} from "docs-model";
import Group from "../../../../markdown/Group.astro";
import Comment from "../../comments/Comment.astro";
import Parameters from "../../parameters/Parameters.astro";
interface Props {
    member: ConstructorMemberModel;
    context: BuildContext<BaseTypePage>;
}

const { member, context } = Astro.props;
const { page } = context;
const { comment, key, origin, parameters } = member;

let code = "";
const title = member.renderAsTitle(context);
const typeParams = page.type.renderTypeParameters(context);

let memberTypeParams = "";
if (member.hasTypeParams()) {
    const { typeParameters } = member;
    memberTypeParams += `<${Object.values(typeParameters)
        .map((value) => value.getExampleFor(context, value.key, value.key))
        .join(", ")}>`;
}
const paramExamples = (parameters ?? []).map((param) => {
    return param.type.getExampleFor(
        context,
        param.key,
        `my${capitalizeFirst(param.type.getDefaultExample())}`,
    );
});
code += `${member.key} ${page.displayName}${typeParams}${memberTypeParams}(${paramExamples.flatMap((ex) => ex[0]).join(", ")});`;

const exampleComment = {
    type: page.type,
    member: member,
};
---

<Group name={title} titleIsCode={true} nestedLevel={1}>
    {comment && <Comment comment={comment} context={context} />}
    <Code code={code} lang="zenscript" wrap={false} frame="code" title="script.zs" exampleComment={exampleComment} context={context} />
    <Parameters parameters={parameters} context={context} member={member} />
</Group>
